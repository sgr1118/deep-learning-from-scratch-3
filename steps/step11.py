# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dWbkE1ucKOUJl3uwzb_-bBs5lcwgz_L2
"""
import numpy as np

class Variable():
    def __init__(self, data):
        if data is not None:
            if not isinstance(data, np.ndarray):
                raise TypeError('{}은(는) 지원하지 않습니다.'.format(type(data)))
        self.data = data
        self.grad = None # 미분값 저장
        self.creator = None # 인스턴스 변수 추가

    def set_creator(self, func): # 메서드 추가
        self.creator = func

    def backward(self):
        if self.grad is None:
            self.grad = np.ones_like(self.data) # self.data와 형상과
            # 데이터 터입이 같은 ndarray 인스턴스 생성
        funcs = [self.creator]
        while funcs:
            f = funcs.pop() # 1. 함수를 가져온다.
            x, y = f.input, f.output # 2. 함수의 입력과 출력을 가져온다
            x.grad = f.backward(y.grad) # 3. backward 메서드를 호출한다.

            if x.creator is not None:
                funcs.append(x.creator) # 4. 하나 앞의 함수를 리스트에 추가한다.

# 문제를 해결할 편의 함수
def as_array(x):
    if np.isscalar(x):
        return np.array(x)
    return x

class Function:
    def __call__(self, inputs): # __call__ 메서드의 인수 input은 Variable 인스턴스라고 가정
        xs = [x.data for x in inputs] # input을 리스트로
        ys = self.forward(xs)
        outputs = [Variable(as_array(y)) for y in ys] # output을 리스트로

        for output in outputs:
            output.set_creator(self)
        self.inputs = inputs
        self.outputs = outputs
        return outputs

    def forward(self, x):
        raise NotImplementedError() 

    def backward(self, gy):
        raise NotImplementedError()

class Add(Function):
    def forward(self, xs):
        x0, x1 = xs
        y = x0 + x1
        return (y,) # 튜플 형태 반환값, 값이 하나 생략되어도 문제 없다.

xs = [Variable(np.array(2)), Variable(np.array(3))]
f = Add()
ys = f(xs)
y = ys[0]
print(y.data)